# frozen_string_literal: true

require 'yaml'
require 'spaceship'
require 'fileutils'

APP_ID = 'net.artsy.artsy'

skip_docs

before_all do
  setup_circle_ci
end

lane :ship_beta do
  verify_pod_keys

  readme_yaml = File.read('../CHANGELOG.yml')
  readme_data = YAML.safe_load(readme_yaml)

  latest_version = readme_data['upcoming']['version']

  client = Spaceship::Tunes.login(ENV['FASTLANE_USERNAME'], ENV['FASTLANE_PASSWORD'])
  client.team_id = '479887'
  app = Spaceship::Tunes::Application.find('net.artsy.artsy')

  # Fail early if we need to make a new version on iTunes
  if app.latest_version.version != latest_version
    raise "You need to create an app version for #{latest_version} in iTunes before deploying"
  end

  upcoming = readme_data['upcoming']
  commit = `git log -n1 --format='%h'`.strip
  notes = upcoming['user_facing'] || []
  beta_readme = "## #{upcoming['version']} - #{commit} \n\n - #{notes.join "\n - "} \n\n"

  # Make sure the stickers app is up to date in it's plist
  `/usr/libexec/PlistBuddy -c "Set CFBundleVersion #{latest_version}" Artsy\ Stickers/Info.plist`

  # Builds the app
  sync_code_signing(app_identifier: ['net.artsy.artsy', 'net.artsy.artsy.Artsy-Stickers'], type: 'appstore')

  disable_automatic_code_signing(
    path: 'Artsy.xcodeproj',
    team_id: '23KMWZ572J',
    targets: ['Artsy'],
    profile_name: 'match AppStore net.artsy.artsy'
  )
  disable_automatic_code_signing(
    path: 'Artsy.xcodeproj',
    team_id: '23KMWZ572J',
    targets: ['Artsy Stickers'],
    profile_name: 'match AppStore net.artsy.artsy.Artsy-Stickers'
  )

  build_ios_app(configuration: 'Store', silent: true)

  root = File.expand_path('..', __dir__)
  bundle_version = `/usr/libexec/PlistBuddy -c "print CFBundleVersion" #{File.join(root, 'Artsy/App_Resources/Artsy-Info.plist')}`.strip
  tag_and_push(tag: "#{latest_version}-#{bundle_version}")

  # First make individual dSYM archives available to the sentry-cli tool.
  sentry_version = latest_version
  dsym_archive = File.join(root, 'Artsy.app.dSYM.zip')
  dsyms_path = File.join(root, 'dSYMs')
  sh "unzip -d #{dsyms_path} #{dsym_archive}"

  upload_to_sentry = lambda do |project_slug|
    org_slug = 'artsynet'
    sentry_create_release auth_token: ENV['SentryUploadAuthKey'],
                          org_slug: org_slug,
                          project_slug: project_slug,
                          version: sentry_version,
                          finalize: false
    puts "Created a release for #{project_slug}"

    Dir.glob(File.join(dsyms_path, '*.dSYM')).each do |dsym_path|
      # No need to specify `dist` as the build number is encoded in the dSYM's Info.plist
      sentry_upload_dsym auth_token: ENV['SentryUploadAuthKey'],
                         org_slug: org_slug,
                         project_slug: project_slug,
                         dsym_path: dsym_path
      puts "Uploaded dsym for #{project_slug}"
    end

    begin
      sentry_upload_file auth_token: ENV['SentryUploadAuthKey'],
                         org_slug: org_slug,
                         project_slug: project_slug,
                         version: sentry_version,
                         dist: bundle_version,
                         file: 'emission/Pod/Assets/Emission.js'
      puts "Uploaded Emission.js for #{project_slug}"

      sentry_upload_sourcemap auth_token: ENV['SentryUploadAuthKey'],
                              org_slug: org_slug,
                              project_slug: project_slug,
                              version: sentry_version,
                              dist: bundle_version,
                              sourcemap: 'emission/Pod/Assets/Emission.js.map',
                              rewrite: true
      puts "Uploaded Emission.js.map for #{project_slug}"
    rescue StandardError => e
      message = 'Uploading the JS bundle and/or sourcemap to Sentry failed. This sometimes happens when shipping many builds to Sentry.'
      puts message
      slack(
        message: message,
        success: false,
        payload: {
          'Circle Build' => ENV['CIRCLE_BUILD_URL'],
          'Exception' => e.message
        },
        default_payloads: [:last_git_commit_hash]
      )
      puts e.message
      puts e.backtrace.join("\n\t")
    end
  end

  upload_to_sentry.call('eigen')
  # We get "file already present" when trying to upload this for staging
  # https://circleci.com/gh/artsy/eigen/5274
  #
  # upload_to_sentry.call('eigen-staging')

  # Send to the app store
  beta_app_review_info = {
    contact_email: ENV['BETA_CONTACT_EMAIL'],
    contact_first_name: ENV['BETA_CONTACT_FIRST_NAME'],
    contact_last_name: ENV['BETA_CONTACT_LAST_NAME'],
    contact_phone: ENV['BETA_CONTACT_PHONE'],
    demo_account_name: ENV['BETA_DEMO_ACCOUNT_NAME'],
    demo_account_password: ENV['BETA_DEMO_ACCOUNT_PWD']
  }
  pilot beta_app_review_info: beta_app_review_info,
        changelog: beta_readme,
        itc_provider: 'ArtsyInc',
        distribute_external: true,
        groups: ['Artsy']
end

lane :promote_beta do
  client = Spaceship::Tunes.login(ENV['FASTLANE_USERNAME'], ENV['FASTLANE_PASSWORD'])
  client.team_id = '479887'
  app = Spaceship::Tunes::Application.find('net.artsy.artsy')

  # app.builds are listed most recent last; we are assuming that we're shipping the most recent beta.
  beta = app.builds.last

  puts "Let's deliver beta #{beta.train_version} (#{beta.build_version}) with build number #{latest_testflight_build_number}."
  deliver(
    build_number: latest_testflight_build_number,
    submit_for_review: true,
    force: true, # Skip HTMl report verification
    skip_screenshots: true,
    skip_binary_upload: true,
    submit_for_review: true,
    submission_information: {
      add_id_info_limits_tracking: true,
      add_id_info_serves_ads: false,
      add_id_info_tracks_action: true,
      add_id_info_tracks_install: true,
      add_id_info_uses_idfa: true,
      content_rights_has_rights: true,
      content_rights_contains_third_party_content: true,
      export_compliance_platform: 'ios',
      export_compliance_compliance_required: false,
      export_compliance_encryption_updated: false,
      export_compliance_app_type: nil,
      export_compliance_uses_encryption: false,
      export_compliance_is_exempt: false,
      export_compliance_contains_third_party_cryptography: false,
      export_compliance_contains_proprietary_cryptography: false,
      export_compliance_available_on_french_store: false
    }
  )

  puts 'Tagging submission and pushing to GitHub.'

  # Apple's API returns truncated version/build numbers (eg: 2020.03.19.18 becomes 2020.3.19.18)
  # So we re-compute this based on the same information as the :ship_beta lane.
  root = File.expand_path('..', __dir__)
  readme_yaml = File.read('../CHANGELOG.yml')
  readme_data = YAML.safe_load(readme_yaml)
  latest_version = readme_data['upcoming']['version']
  bundle_version = `/usr/libexec/PlistBuddy -c "print CFBundleVersion" #{File.join(root, 'Artsy/App_Resources/Artsy-Info.plist')}`.strip

  target_object = "#{latest_version}-#{bundle_version}" # This is computed, we expect it to exist.
  tag_and_push(tag: "#{target_object}-submission", target_object: target_object)

  puts 'All done.'
end

lane :tag_and_push do |options|
  # Do a tag, we use a http git remote so we can have push access
  # as the default remote for circle is read-only
  tag = options[:tag]
  target_object = options[:target_object]
  `git tag -d "#{tag}"`

  # Allow older commits to get tagged, when promoting to submission.
  if target_object
    add_git_tag tag: tag, commit: target_object, message: "Promoting #{tag} to App Store submission"
  else
    add_git_tag tag: tag
  end
  `git remote add http https://github.com/artsy/eigen.git`
  `git push http #{tag} -f`
end
